package fshare.serveur;

/**
 * Title:        InfoFichierServeur.java
 * Description:  Mémorise pour un fichier donné des informations telles que qui à le fichier avec quelles parties etc..
 * Copyright:    Copyright (c) 2004
 * Company:
 * @author Giraud Rémy, Mandrioli Damien
 * @version 1.0
 */

import java.util.Date;
import java.util.ArrayList;

import fshare.commun.AttributFichierClient;
import fshare.commun.Fichier;

public class InfoFichierServeur
{

/**
 * Represente le fichier qu'on traite.
 */
    private Fichier fichier;

/**
 * Represente la liste des clients qui possède ce fichier
 */
    private ArrayList listeClient;

/**
 * Represente la date la plus ancienne du fichier.
 */
    private Date date;

/**
 * Represente la listes des attributs pour chaque client, pour le fichier considéré.
 * Il y a une forte correspondance entre listeClient et listeAttributFichierClient.
 * Pour le meme indice i, le client listeClient (i) possede listeAttributFichierClient (i).
 */
    private ArrayList listeAttributFichierClient;


  /**
   * Construit un objet pour contenir des information sur le fichier fichier.
   * @param fichier le fichier à considerer.
   */
  public InfoFichierServeur(Fichier fichier)
  {
    this.fichier = fichier;
    listeClient = null;
    listeAttributFichierClient = null;
    date = null;
  }

  /**
   * Ajoute les informations <B>attr</B> du client <B>client</B>.
   * @param client le client qui possede le fichier.
   * @param attr les attributs du fichier pour le client <B>client</B>
   */
  public void ajouteClient (RemoteClient client, AttributFichierClient attr)
  {
    /* On ajoute le client s'il n'existe pas */
    if (!listeClient.contains (client))
    {
      listeClient.add (client);
    }
    /* On récupere l'indice du client dans l'arrayListe */
    int indice = listeClient.indexOf (client);

    /* Au meme indice de la liste de client on ajoute ces attribut de fichier */
    listeAttributFichierClient.add (indice, attr);

    /* Si la date est plus ancienne on met à jour */
    if (attr.getDateDerModif ().before (date))
      date = attr.getDateDerModif ();
  }


  /**
   * Retire le fichier du partage pour le client <B>client</B>.
   * @param le client qui retire le fichier.
   */
  public void retirerFichierClient(RemoteClient client)
  {
    /* Supprime les 2 entrées dans les 2 arrayListe */
    if (listeClient.contains (client))
    {
      int indice = listeClient.indexOf (client);
      listeClient.remove (indice);
      listeAttributFichierClient.remove (indice);
    }
  }

  /**
   * @return la liste de tous les clients possédant le fichier.
   */
  public RemoteClient [] getListeClient ()
  {
    int taille = listeClient.size ();
    RemoteClient [] result = new RemoteClient [taille];
    for (int i = 0; i < taille; ++i)
      result [i] = (RemoteClient) listeClient.get (i);
    return result;
  }

  /**
   * @return la liste des attributs de fichier pour le fichier considérer.
   */
  public AttributFichierClient [] getListeAttributFichierClient ()
  {
    int taille = listeAttributFichierClient.size ();
    AttributFichierClient [] result = new AttributFichierClient [taille];
    for (int i = 0; i < taille; ++i)
      result [i] = (AttributFichierClient) listeAttributFichierClient.get (i);
    return result;
  }

  /**
   * @return les attributs du fichier pour le client <b>client</b>.<br>
   * renvoi null si le client <b>client</b> ne possede pas le fichier.
   */
  public AttributFichierClient getAttributFichierClient (RemoteClient client)
  {
    if (listeClient.contains (client))
      return ((AttributFichierClient) listeAttributFichierClient.get (listeClient.indexOf (client)));
    return null;
  }


} // Classe InfoFichierServeur